/**
 * PassHub API
 * PassHub API documentation
 *
 * OpenAPI spec version: 1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ProductDTO'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ProductDTO'));
  } else {
    // Browser globals (root is window)
    if (!root.PassHubApi) {
      root.PassHubApi = {};
    }
    root.PassHubApi.ProductResourceApi = factory(root.PassHubApi.ApiClient, root.PassHubApi.ProductDTO);
  }
}(this, function(ApiClient, ProductDTO) {
  'use strict';

  /**
   * ProductResource service.
   * @module api/ProductResourceApi
   * @version 1.1
   */

  /**
   * Constructs a new ProductResourceApi. 
   * @alias module:api/ProductResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the findProductsByVendor operation.
     * @callback module:api/ProductResourceApi~findProductsByVendorCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * findProductsByVendor
     * Required permissions: CAN_GET_PRODUCTS_BY_VENDOR
     * @param {Number} vendorId the internal vendor id
     * @param {module:api/ProductResourceApi~findProductsByVendorCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductDTO>}
     */
    this.findProductsByVendor = function(vendorId, callback) {
      var postBody = null;

      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling findProductsByVendor");
      }


      var pathParams = {
        'vendorId': vendorId
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Api-Key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ProductDTO];

      return this.apiClient.callApi(
        '/api/v1/products/vendor/{vendorId}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the getAllProducts operation.
     * @callback module:api/ProductResourceApi~getAllProductsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/ProductDTO>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * getAllProducts
     * Required permissions: CAN_GET_PRODUCTS
     * @param {Object} opts Optional parameters
     * @param {String} opts.query query text
     * @param {Number} opts.size quantity of listed records on page
     * @param {Number} opts.page listing starts from page value
     * @param {module:model/String} opts.sortBy sort by
     * @param {module:model/String} opts.sortOrder sort order
     * @param {module:model/String} opts.type product type
     * @param {Array.<String>} opts.tagFilter tagFilter
     * @param {module:model/String} opts.tagFilterMode tagFilterMode
     * @param {module:api/ProductResourceApi~getAllProductsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/ProductDTO>}
     */
    this.getAllProducts = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'query': opts['query'],
        'size': opts['size'],
        'page': opts['page'],
        'sortBy': opts['sortBy'],
        'sortOrder': opts['sortOrder'],
        'type': opts['type'],
        'tagFilterMode': opts['tagFilterMode'],
      };
      var collectionQueryParams = {
        'tagFilter': {
          value: opts['tagFilter'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Api-Key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = [ProductDTO];

      return this.apiClient.callApi(
        '/api/v2/products', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
