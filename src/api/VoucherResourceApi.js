/**
 * PassHub API
 * PassHub API documentation
 *
 * OpenAPI spec version: 1.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ExtraValidationParamDTO', 'model/GenericStatusDTO', 'model/JSONObject', 'model/OrderNoteParamDTO', 'model/ValidationResult'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ExtraValidationParamDTO'), require('../model/GenericStatusDTO'), require('../model/JSONObject'), require('../model/OrderNoteParamDTO'), require('../model/ValidationResult'));
  } else {
    // Browser globals (root is window)
    if (!root.PassHubApi) {
      root.PassHubApi = {};
    }
    root.PassHubApi.VoucherResourceApi = factory(root.PassHubApi.ApiClient, root.PassHubApi.ExtraValidationParamDTO, root.PassHubApi.GenericStatusDTO, root.PassHubApi.JSONObject, root.PassHubApi.OrderNoteParamDTO, root.PassHubApi.ValidationResult);
  }
}(this, function(ApiClient, ExtraValidationParamDTO, GenericStatusDTO, JSONObject, OrderNoteParamDTO, ValidationResult) {
  'use strict';

  /**
   * VoucherResource service.
   * @module api/VoucherResourceApi
   * @version 1.1
   */

  /**
   * Constructs a new VoucherResourceApi. 
   * @alias module:api/VoucherResourceApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the cancelValidation operation.
     * @callback module:api/VoucherResourceApi~cancelValidationCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericStatusDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [V2] Cancel validation for the voucher
     * Required permissions: CAN_CANCEL_VALIDATION
     * @param {String} transactionTag the transaction tag of validation
     * @param {Object} opts Optional parameters
     * @param {module:model/String} opts.reason the reason of validation
     * @param {module:model/OrderNoteParamDTO} opts.note the validation note dto
     * @param {module:api/VoucherResourceApi~cancelValidationCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericStatusDTO}
     */
    this.cancelValidation = function(transactionTag, opts, callback) {
      opts = opts || {};
      var postBody = opts['note'];

      // verify the required parameter 'transactionTag' is set
      if (transactionTag === undefined || transactionTag === null) {
        throw new Error("Missing the required parameter 'transactionTag' when calling cancelValidation");
      }


      var pathParams = {
      };
      var queryParams = {
        'transactionTag': transactionTag,
        'reason': opts['reason'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Api-Key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenericStatusDTO;

      return this.apiClient.callApi(
        '/api/v2/voucher/validate/cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the cancelVoucher operation.
     * @callback module:api/VoucherResourceApi~cancelVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GenericStatusDTO} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * cancelVoucher
     * Required permissions: CAN_CANCEL_ORDER
     * @param {Number} orderId the internal id of order
     * @param {Object} opts Optional parameters
     * @param {String} opts.voucherId the voucher id
     * @param {module:model/OrderNoteParamDTO} opts.note the voucher note dto
     * @param {module:api/VoucherResourceApi~cancelVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GenericStatusDTO}
     */
    this.cancelVoucher = function(orderId, opts, callback) {
      opts = opts || {};
      var postBody = opts['note'];

      // verify the required parameter 'orderId' is set
      if (orderId === undefined || orderId === null) {
        throw new Error("Missing the required parameter 'orderId' when calling cancelVoucher");
      }


      var pathParams = {
      };
      var queryParams = {
        'orderId': orderId,
        'voucherId': opts['voucherId'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Api-Key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = GenericStatusDTO;

      return this.apiClient.callApi(
        '/api/v1/voucher/cancel', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the convertVoucher operation.
     * @callback module:api/VoucherResourceApi~convertVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/JSONObject} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * convertVoucher
     * Required permissions: CAN_CONVERT_VOUCHER
     * @param {String} oldVoucherId the old voucher id
     * @param {String} newVoucherId the new voucher id
     * @param {module:api/VoucherResourceApi~convertVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/JSONObject}
     */
    this.convertVoucher = function(oldVoucherId, newVoucherId, callback) {
      var postBody = null;

      // verify the required parameter 'oldVoucherId' is set
      if (oldVoucherId === undefined || oldVoucherId === null) {
        throw new Error("Missing the required parameter 'oldVoucherId' when calling convertVoucher");
      }

      // verify the required parameter 'newVoucherId' is set
      if (newVoucherId === undefined || newVoucherId === null) {
        throw new Error("Missing the required parameter 'newVoucherId' when calling convertVoucher");
      }


      var pathParams = {
      };
      var queryParams = {
        'oldVoucherId': oldVoucherId,
        'newVoucherId': newVoucherId,
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Api-Key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = JSONObject;

      return this.apiClient.callApi(
        '/api/v1/voucher/convert', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the validateVoucher operation.
     * @callback module:api/VoucherResourceApi~validateVoucherCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ValidationResult} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * [V2] Validates voucher which represents single order item or group of them.
     * Required permissions: CAN_VALIDATE;
     * @param {String} validationId the voucher validation id
     * @param {Number} vendorId the internal id of vendor
     * @param {Object} opts Optional parameters
     * @param {String} opts.productTag the product tag
     * @param {Array.<Number>} opts.orderItemIds the array of order item ids
     * @param {Boolean} opts.skipExpiryCheck flag to skip expiry check within strategy
     * @param {module:model/ExtraValidationParamDTO} opts.extraParamDTO the validation extra params dto
     * @param {module:api/VoucherResourceApi~validateVoucherCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ValidationResult}
     */
    this.validateVoucher = function(validationId, vendorId, opts, callback) {
      opts = opts || {};
      var postBody = opts['extraParamDTO'];

      // verify the required parameter 'validationId' is set
      if (validationId === undefined || validationId === null) {
        throw new Error("Missing the required parameter 'validationId' when calling validateVoucher");
      }

      // verify the required parameter 'vendorId' is set
      if (vendorId === undefined || vendorId === null) {
        throw new Error("Missing the required parameter 'vendorId' when calling validateVoucher");
      }


      var pathParams = {
      };
      var queryParams = {
        'validationId': validationId,
        'vendorId': vendorId,
        'productTag': opts['productTag'],
        'skipExpiryCheck': opts['skipExpiryCheck'],
      };
      var collectionQueryParams = {
        'orderItemIds': {
          value: opts['orderItemIds'],
          collectionFormat: 'csv'
        },
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = ['X-Api-Key'];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = ValidationResult;

      return this.apiClient.callApi(
        '/api/v2/voucher/validate', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
